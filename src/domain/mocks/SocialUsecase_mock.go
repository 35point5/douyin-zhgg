// Code generated by MockGen. DO NOT EDIT.
// Source: douyin-service/domain (interfaces: SocialUsecase)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
        domain "douyin-service/domain"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockSocialUsecase is a mock of SocialUsecase interface.
type MockSocialUsecase struct {
        ctrl     *gomock.Controller
        recorder *MockSocialUsecaseMockRecorder
}

// MockSocialUsecaseMockRecorder is the mock recorder for MockSocialUsecase.
type MockSocialUsecaseMockRecorder struct {
        mock *MockSocialUsecase
}

// NewMockSocialUsecase creates a new mock instance.
func NewMockSocialUsecase(ctrl *gomock.Controller) *MockSocialUsecase {
        mock := &MockSocialUsecase{ctrl: ctrl}
        mock.recorder = &MockSocialUsecaseMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocialUsecase) EXPECT() *MockSocialUsecaseMockRecorder {
        return m.recorder
}

// FollowActionByUserId mocks base method.
func (m *MockSocialUsecase) FollowActionByUserId(arg0, arg1 int64, arg2 int32) (bool, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FollowActionByUserId", arg0, arg1, arg2)
        ret0, _ := ret[0].(bool)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FollowActionByUserId indicates an expected call of FollowActionByUserId.
func (mr *MockSocialUsecaseMockRecorder) FollowActionByUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowActionByUserId", reflect.TypeOf((*MockSocialUsecase)(nil).FollowActionByUserId), arg0, arg1, arg2)
}

// GetFollowListByUserId mocks base method.
func (m *MockSocialUsecase) GetFollowListByUserId(arg0 int64) ([]domain.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetFollowListByUserId", arg0)
        ret0, _ := ret[0].([]domain.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetFollowListByUserId indicates an expected call of GetFollowListByUserId.
func (mr *MockSocialUsecaseMockRecorder) GetFollowListByUserId(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowListByUserId", reflect.TypeOf((*MockSocialUsecase)(nil).GetFollowListByUserId), arg0)
}

// GetFollowerListByUserId mocks base method.
func (m *MockSocialUsecase) GetFollowerListByUserId(arg0 int64) ([]domain.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetFollowerListByUserId", arg0)
        ret0, _ := ret[0].([]domain.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetFollowerListByUserId indicates an expected call of GetFollowerListByUserId.
func (mr *MockSocialUsecaseMockRecorder) GetFollowerListByUserId(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerListByUserId", reflect.TypeOf((*MockSocialUsecase)(nil).GetFollowerListByUserId), arg0)
}

// GetFriendListByUserId mocks base method.
func (m *MockSocialUsecase) GetFriendListByUserId(arg0 int64) ([]domain.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetFriendListByUserId", arg0)
        ret0, _ := ret[0].([]domain.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetFriendListByUserId indicates an expected call of GetFriendListByUserId.
func (mr *MockSocialUsecaseMockRecorder) GetFriendListByUserId(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendListByUserId", reflect.TypeOf((*MockSocialUsecase)(nil).GetFriendListByUserId), arg0)
}