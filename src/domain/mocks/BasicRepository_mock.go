// Code generated by MockGen. DO NOT EDIT.
// Source: douyin-service/domain (interfaces: BasicRepository)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
        domain "douyin-service/domain"
        reflect "reflect"
        time "time"

        gomock "github.com/golang/mock/gomock"
)

// MockBasicRepository is a mock of BasicRepository interface.
type MockBasicRepository struct {
        ctrl     *gomock.Controller
        recorder *MockBasicRepositoryMockRecorder
}

// MockBasicRepositoryMockRecorder is the mock recorder for MockBasicRepository.
type MockBasicRepositoryMockRecorder struct {
        mock *MockBasicRepository
}

// NewMockBasicRepository creates a new mock instance.
func NewMockBasicRepository(ctrl *gomock.Controller) *MockBasicRepository {
        mock := &MockBasicRepository{ctrl: ctrl}
        mock.recorder = &MockBasicRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicRepository) EXPECT() *MockBasicRepositoryMockRecorder {
        return m.recorder
}

// CreateUser mocks base method.
func (m *MockBasicRepository) CreateUser(arg0 domain.UserModel) (int64, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateUser", arg0)
        ret0, _ := ret[0].(int64)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockBasicRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockBasicRepository)(nil).CreateUser), arg0)
}

// GetUserById mocks base method.
func (m *MockBasicRepository) GetUserById(arg0 int64) domain.UserModel {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserById", arg0)
        ret0, _ := ret[0].(domain.UserModel)
        return ret0
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockBasicRepositoryMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockBasicRepository)(nil).GetUserById), arg0)
}

// GetUserByName mocks base method.
func (m *MockBasicRepository) GetUserByName(arg0 string) domain.UserModel {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserByName", arg0)
        ret0, _ := ret[0].(domain.UserModel)
        return ret0
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockBasicRepositoryMockRecorder) GetUserByName(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockBasicRepository)(nil).GetUserByName), arg0)
}

// GetVideoByTime mocks base method.
func (m *MockBasicRepository) GetVideoByTime(arg0 time.Time) []domain.VideoModel {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetVideoByTime", arg0)
        ret0, _ := ret[0].([]domain.VideoModel)
        return ret0
}

// GetVideoByTime indicates an expected call of GetVideoByTime.
func (mr *MockBasicRepositoryMockRecorder) GetVideoByTime(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoByTime", reflect.TypeOf((*MockBasicRepository)(nil).GetVideoByTime), arg0)
}

// IsFavorite mocks base method.
func (m *MockBasicRepository) IsFavorite(arg0, arg1 int64) bool {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "IsFavorite", arg0, arg1)
        ret0, _ := ret[0].(bool)
        return ret0
}

// IsFavorite indicates an expected call of IsFavorite.
func (mr *MockBasicRepositoryMockRecorder) IsFavorite(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavorite", reflect.TypeOf((*MockBasicRepository)(nil).IsFavorite), arg0, arg1)
}

// IsFollow mocks base method.
func (m *MockBasicRepository) IsFollow(arg0, arg1 int64) bool {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "IsFollow", arg0, arg1)
        ret0, _ := ret[0].(bool)
        return ret0
}

// IsFollow indicates an expected call of IsFollow.
func (mr *MockBasicRepositoryMockRecorder) IsFollow(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollow", reflect.TypeOf((*MockBasicRepository)(nil).IsFollow), 
arg0, arg1)
}