// Code generated by MockGen. DO NOT EDIT.
// Source: douyin-service/domain (interfaces: BasicUsecase)

// Package mock_domain is a generated GoMock package.      
package mock_domain

import (
        domain "douyin-service/domain"
        reflect "reflect"
        time "time"

        gomock "github.com/golang/mock/gomock"
)

// MockBasicUsecase is a mock of BasicUsecase interface.
type MockBasicUsecase struct {
        ctrl     *gomock.Controller
        recorder *MockBasicUsecaseMockRecorder
}

// MockBasicUsecaseMockRecorder is the mock recorder for MockBasicUsecase.
type MockBasicUsecaseMockRecorder struct {
        mock *MockBasicUsecase
}

// NewMockBasicUsecase creates a new mock instance.
func NewMockBasicUsecase(ctrl *gomock.Controller) *MockBasicUsecase {
        mock := &MockBasicUsecase{ctrl: ctrl}
        mock.recorder = &MockBasicUsecaseMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicUsecase) EXPECT() *MockBasicUsecaseMockRecorder {
        return m.recorder
}

// GetVideoByTime mocks base method.
func (m *MockBasicUsecase) GetVideoByTime(arg0 time.Time, arg1 int64) ([]domain.Video, time.Time) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetVideoByTime", arg0, arg1)
        ret0, _ := ret[0].([]domain.Video)
        ret1, _ := ret[1].(time.Time)
        return ret0, ret1
}

// GetVideoByTime indicates an expected call of GetVideoByTime.
func (mr *MockBasicUsecaseMockRecorder) GetVideoByTime(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoByTime", reflect.TypeOf((*MockBasicUsecase)(nil).GetVideoByTime), arg0, arg1)
}

// UserLogin mocks base method.
func (m *MockBasicUsecase) UserLogin(arg0 domain.UserRegisterRequest) domain.UserModel {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserLogin", arg0)
        ret0, _ := ret[0].(domain.UserModel)
        return ret0
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockBasicUsecaseMockRecorder) UserLogin(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockBasicUsecase)(nil).UserLogin), arg0)
}

// UserRegister mocks base method.
func (m *MockBasicUsecase) UserRegister(arg0 domain.UserRegisterRequest) (int64, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserRegister", arg0)
        ret0, _ := ret[0].(int64)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockBasicUsecaseMockRecorder) UserRegister(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockBasicUsecase)(nil).UserRegister), arg0)
}

// UserRequest mocks base method.
func (m *MockBasicUsecase) UserRequest(arg0 domain.UserAuth) domain.User {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserRequest", arg0)
        ret0, _ := ret[0].(domain.User)
        return ret0
}

// UserRequest indicates an expected call of UserRequest.
func (mr *MockBasicUsecaseMockRecorder) UserRequest(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRequest", reflect.TypeOf((*MockBasicUsecase)(nil).UserRequest), arg0)
}